#
#    install.packages("GA")
library(GA)
#
# To in
f <- function(x)
{
y <- (0.46 * (dnorm(x, -1, 2/3) + dnorm(x, 1, 2/3)) +
(1/300) * (dnorm(x, -0.5, 0.01) + dnorm(x, -1, 0.01) +
dnorm(x, -1.5, 0.01)) +
(7/300) * (dnorm(x, 0.5, 0.07) + dnorm(x, 1, 0.07) +
dnorm(x, 1.5, 0.07)))
y ### return(y)
}
# Plot the double claw
curve(f, from = -3, to = 3, n = 1000)
# For the maximization of this function we may use f directly as the fitness function
GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3)
# The object returned can be plotted
plot(GA)
summary(GA)
# plot the solution
curve(f, from = -3, to = 3, n = 1000)
points(GA@solution, f(GA@solution), col="red")
myMonitor <- function(obj)
{
curve(f, obj@lower, obj@upper, n = 1000, main = paste("iteration =", obj@iter))
points(obj@population, obj@fitness, pch = 20, col = 2)
rug(obj@population, col = 2)
Sys.sleep(1)
}
GA <- ga(type = "real-valued", fitness = f, lower = -3, upper = 3, monitor = myMonitor)
## Inspect fitness across generations
plot(GA)
## Inspect fitness across generations
plot(GA)
# The age at which the tree was measured
Age <- c(2.44, 12.44, 22.44, 32.44, 42.44, 52.44, 62.44, 72.44, 82.44, 92.44, 102.44, 112.44)
# The bole volume of the tree
Vol <- c(2.2, 20.0, 93.0, 262.0, 476.0, 705.0, 967.0, 1203.0, 1409.0, 1659.0, 1898.0, 2106.0)
plot(Age, Vol)
# We first define our model function (argument params represents a vector of the parameters a, b, and c)
model <- function(params)
{
params[1] * (1 - exp(-params[2] * Age))^params[3]
}
# We define the fitness function as the sum of squares of the differences between estimated and observed data
myFitness2 <- function(params)
{
-sum((Vol - model(params))^2)
}
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"))
summary(GA2)
# Let's plot our solution
plot(Age, Vol)
lines(Age, model(GA2@solution))
myMonitor2 <- function(obj)
{
i <- which.max(obj@fitness)
plot(Age, Vol)
lines(Age, model(obj@population[i,]), col="red")
title(paste("iteration =", obj@iter), font.main = 1)
Sys.sleep(1)
}
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"), monitor=myMonitor2)
# a vector of the items' values
values <- c(5, 8, 3, 4, 6, 5, 4, 3, 2)
# a vector of the item's weights
weights <- c(1, 3, 2, 4, 2, 1, 3, 4, 5)
# the knapsack capacity
Capacity <- 10
knapsack <- function(x)
{
f <- sum(x * values)
w <- sum(x * weights)
if (w > Capacity)
f <- Capacity - w
f
}
GA3 <- ga(type = "binary", fitness = knapsack, nBits = length(weights), maxiter = 1000, run = 200, popSize = 100)
summary(GA3)
GA3@solution
senior     = c(1, 3, 2, 0, 4, 3, 1, 1, 0)
youth      = c(1, 3, 2, 4, 0, 3, 1, 0, 1)
slots      = 4*5
valueBin <- function(timetable)
{
# organize data into a multi-dimensional array
# days, time slots, staff, teams
t <- array(as.integer(timetable), c(5,4,9,2))
violations <- 0
# check all the conditions
# check the number of sessions per component
for (i in 1:9)
{
violations <- violations + abs(sum(t[,,i,1]) - senior[i])
violations <- violations + abs(sum(t[,,i,2]) - youth[i])
}
# it is not allowed to train the same component 2 or more times within one day
for (i in 1:9)
{
violations <- violations + sum(apply(t[,,i,1], 1, sum) > 1)
violations <- violations + sum(apply(t[,,i,2], 1, sum) > 1)
}
# a single staff member can only train one of the two teams in a single time slot
violations <- violations + sum(t[,,,1] == t[,,,2] & t[,,,1] != 0)
# each time slot can hold only one component for the youth team and one component
# for the senior team
for (i in 1:5)
for (j in 1:4)
{
violations <- violations + max(0, sum(t[i,j,,1]) - 1)
violations <- violations + max(0, sum(t[i,j,,2]) - 1)
}
# Tactics training should be scheduled for Thursday in the 16:15 - 18:15 time slot
violations <- violations + (t[4,3,8,1] != 1)
violations <- violations + (t[4,3,9,2] != 1)
# there is no training in the Monday 8:00 - 10:00 time slot
violations <- violations + sum(t[1,1,,])
# the stamina training coach Dusan is not available on Monday mornings
violations <- violations + sum(t[1,1:2,4,] == 1)
# there can be no Technique training on Wednesdays
violations <- violations + sum(t[3,,2,] == 1)
-violations
}
myInitPopulation <- function(object)
{
p <- gabin_Population(object)
for (i in 1:nrow(p))
{
t <- array(p[i,], c(5,4,9,2))
# Tactics training on Thursdays in the 16:15 - 18:15 time slot
t[4,3,8,1]=1
t[4,3,9,2]=1
# there is no training in the Monday 8:00 - 10:00 time slot
t[1,1,,] = 0
# there is no Stamina training on Monday mornings
t[1,1:2,4,] = 0
# there is no Technique training on Wednesdays
t[3,,2,] = 0
p[i,] <- as.vector(t)
}
p
}
GA4 <- ga(type = "binary", fitness = valueBin, nBits = 4*5*9*2,
popSize = 500, maxiter = 10, run = 200, population = myInitPopulation)
timetable2 <- function(solution,coach,team){
t <- array(solution, c(5,4,9,2))
t[,,coach,team]
}
## timetable of a coach 2 for team 1.
t <- timetable2(GA4@solution[1,],2,1)
t
data("eurodist", package = "datasets")
D <- as.matrix(eurodist)
D
# Calculation of the tour length
tourLength <- function(tour)
{
N <- length(tour)
dist <- 0
for (i in 2:N)
dist <- dist + D[tour[i-1],tour[i]]
dist <- dist + D[tour[N],tour[1]]
dist
}
# The fitness function to be maximized is defined as the reciprocal of the tour length.
tspFitness <- function(tour)
{
1/tourLength(tour)
}
GA5 <- ga(type = "permutation", fitness = tspFitness, lower = 1, upper = ncol(D), popSize = 50, maxiter = 5000, run = 500, pmutation = 0.2)
summary(GA5)
# Reconstruct the solution found
tour <- GA5@solution[1, ]
tour <- c(tour, tour[1])
tourLength(tour)
colnames(D)[tour]
tourLength(tour)
colnames(D)[tour]
# unfeasible solutions.
knapsack <- function(x)
{
f <- sum(x * values)
w <- sum(x * weights)
if (w > Capacity)
f <- Capacity - w
f
}
GA3 <- ga(type = "binary", fitness = knapsack, nBits = length(weights), maxiter = 1000, run = 200, popSize = 100, monitor=plot)
summary(GA3)
GA3@solution
senior     = c(1, 3, 2, 0, 4, 3, 1, 1, 0)
youth      = c(1, 3, 2, 4, 0, 3, 1, 0, 1)
slots      = 4*5
valueBin <- function(timetable)
{
# organize data into a multi-dimensional array
# days, time slots, staff, teams
t <- array(as.integer(timetable), c(5,4,9,2))
violations <- 0
# check all the conditions
# check the number of sessions per component
for (i in 1:9)
{
violations <- violations + abs(sum(t[,,i,1]) - senior[i])
violations <- violations + abs(sum(t[,,i,2]) - youth[i])
}
# it is not allowed to train the same component 2 or more times within one day
for (i in 1:9)
{
violations <- violations + sum(apply(t[,,i,1], 1, sum) > 1)
violations <- violations + sum(apply(t[,,i,2], 1, sum) > 1)
}
# a single staff member can only train one of the two teams in a single time slot
violations <- violations + sum(t[,,,1] == t[,,,2] & t[,,,1] != 0)
# each time slot can hold only one component for the youth team and one component
# for the senior team
for (i in 1:5)
for (j in 1:4)
{
violations <- violations + max(0, sum(t[i,j,,1]) - 1)
violations <- violations + max(0, sum(t[i,j,,2]) - 1)
}
# Tactics training should be scheduled for Thursday in the 16:15 - 18:15 time slot
violations <- violations + (t[4,3,8,1] != 1)
violations <- violations + (t[4,3,9,2] != 1)
# there is no training in the Monday 8:00 - 10:00 time slot
violations <- violations + sum(t[1,1,,])
# the stamina training coach Dusan is not available on Monday mornings
violations <- violations + sum(t[1,1:2,4,] == 1)
# there can be no Technique training on Wednesdays
violations <- violations + sum(t[3,,2,] == 1)
-violations
}
myInitPopulation <- function(object)
{
p <- gabin_Population(object)
for (i in 1:nrow(p))
{
t <- array(p[i,], c(5,4,9,2))
# Tactics training on Thursdays in the 16:15 - 18:15 time slot
t[4,3,8,1]=1
t[4,3,9,2]=1
# there is no training in the Monday 8:00 - 10:00 time slot
t[1,1,,] = 0
# there is no Stamina training on Monday mornings
t[1,1:2,4,] = 0
# there is no Technique training on Wednesdays
t[3,,2,] = 0
p[i,] <- as.vector(t)
}
p
}
GA4 <- ga(type = "binary", fitness = valueBin, nBits = 4*5*9*2,
popSize = 500, maxiter = 10, run = 200, population = myInitPopulation)
GA4 <- ga(type = "binary", fitness = valueBin, nBits = 4*5*9*2,
popSize = 500, maxiter = 10, run = 200, population = myInitPopulation)
GA4 <- ga(type = "binary", fitness = valueBin, nBits = 4*5*9*2,
popSize = 500, maxiter = 100, run = 200, population = myInitPopulation)
timetable2 <- function(solution,coach,team){
t <- array(solution, c(5,4,9,2))
t[,,coach,team]
}
## timetable of a coach 2 for team 1.
t <- timetable2(GA4@solution[1,],2,1)
t
GA4 <- ga(type = "binary", fitness = valueBin, nBits = 4*5*9*2,
popSize = 500, maxiter = 300, run = 200, population = myInitPopulation)
timetable2 <- function(solution,coach,team){
t <- array(solution, c(5,4,9,2))
t[,,coach,team]
}
## timetable of a coach 2 for team 1.
t <- timetable2(GA4@solution[1,],2,1)
t
plot(GA4)
summary(GA4)
summary(GA4)
#
####################################################################################################
install.packages("GA")
library(GA)
#
f <- function(x) {
y <- abs(x) + cos(x)
y
}
f <- function(x) {
y <- abs(x) + cos(x)
y
}
plot(f(1))
plot(f(c(1,3,4,5)))
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
#
f2 <- function(xs) {
y <- 20 + xs[1]^2 + xs[2]^2 - 10^(cos(2*pi*xs[1]) + cos(2*pi*xs[2]))
-y
}
GA2 <- ga(type="real-valued", fitness=f2, lower=c(-5.12, -5.12), upper=c(5.12, 5.12))
plot(GA2)
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
GA2 <- ga(type = "real-valued", fitness = myFitness2, lower = c(1000, 0, 0), upper = c(5000, 5, 5),
popSize = 500, crossover = gareal_blxCrossover, maxiter = 5000, run = 200, names = c("a", "b", "c"))
summary(GA2)
GA2 <- ga(type="real-valued", fitness=f2, lower=c(-5.12, -5.12), upper=c(5.12, 5.12))
summary(GA2)
Substrate <- c(1.73, 2.06, 2.20, 4.28, 4.44, 5.53, 6.32, 6.68, 7.28, 7.90, 8.80, 9.14, 9.18, 9.40, 9.88)
Velocity <- c(12.48, 13.97, 14.59, 21.25, 21.66, 21.97, 25.36, 22.93, 24.81, 25.63, 24.68, 29.04, 28.08, 27.32, 27.77)
f3 <- function(params) {
v <- (params[0] * Substrate) / (params[1] * Substrate)
v
}
GA3 <- ga(type="real-valued", fitness=f3, lower=c(40, 3), upper=(50, 5))
Substrate <- c(1.73, 2.06, 2.20, 4.28, 4.44, 5.53, 6.32, 6.68, 7.28, 7.90, 8.80, 9.14, 9.18, 9.40, 9.88)
Velocity <- c(12.48, 13.97, 14.59, 21.25, 21.66, 21.97, 25.36, 22.93, 24.81, 25.63, 24.68, 29.04, 28.08, 27.32, 27.77)
f3 <- function(params) {
v <- (params[0] * Substrate) / (params[1] * Substrate)
v
}
GA3 <- ga(type="real-valued", fitness=f3, lower=c(40.0, 3.0), upper=(50.0, 5.0))
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
Substrate <- c(1.73, 2.06, 2.20, 4.28, 4.44, 5.53, 6.32, 6.68, 7.28, 7.90, 8.80, 9.14, 9.18, 9.40, 9.88)
Velocity <- c(12.48, 13.97, 14.59, 21.25, 21.66, 21.97, 25.36, 22.93, 24.81, 25.63, 24.68, 29.04, 28.08, 27.32, 27.77)
f3 <- function(params) {
v <- (params[0] * Substrate) / (params[1] * Substrate)
v
}
GA3 <- ga(type="real-valued", fitness=f3, lower=c(40.0, 3.0), upper=c(50.0, 5.0))
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
source("~/OneDrive/grive/faks/3. letnik/1. semester/is/vaje/vaje02/lab 2 - problems.R")
